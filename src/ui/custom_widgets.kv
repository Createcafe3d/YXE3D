#:kivy 1.9.0
#:import _ __main__._

<I18NImageTabbedPanelHeader>:
    on_press: image.color = [1.0,1.0,1.0,0.5]
    on_release: image.color = [1.0,1.0,1.0,1.0]
    text_height: "30dp"
    BoxLayout:
        pos: root.pos
        size: root.size
        orientation: root.orientation
        Image:
            id: image
            allow_stretch: True
            keep_ratio: True
            size_hint_y: self.size_hint_y if root.orientation == 'horizontal' else None
            size_hint_x: self.size_hint_x if root.orientation == 'vertical' else None
            width: min(self.texture_size[0], root.width) if root.orientation == 'horizontal' else max(self.texture_size[0], root.width)
            height: min(self.texture_size[1], root.height) if root.orientation == 'vertical' else max(self.texture_size[1], root.height)
            source: root.source
            pos: [root.pos[0], root.pos[1]]
        Label:
            text: app.translation(root.text_source)
            size_hint_y: self.size_hint_y if root.orientation == 'horizontal' else None
            height: root.text_height

<I18NImageSpinnerOption>:
    size_hint_y: None
    height: '48dp'

<I18NImageSpinner>:
    background_normal: 'atlas://data/images/defaulttheme/spinner'
    background_disabled_normal: 'atlas://data/images/defaulttheme/spinner_disabled'
    background_down: 'atlas://data/images/defaulttheme/spinner_pressed'

<I18NLabel>:
    text: app.translation(self.text_source)

<I18NButton>:
    text: app.translation(self.text_source)

<I18NPopup>:
    title: app.translation(self.title_source)

<I18NToggleButton>:
    text: app.translation(self.text_source)

<I18NTabbedPanelItem>
    text: app.translation(self.text_source)

<I18NAccordionItem>:
    title: app.translation(self.title_source)

<I18NImageToggleButton>:
    on_press: image.color = [1.0,1.0,1.0,0.5]
    on_release: image.color = [1.0,1.0,1.0,1.0]
    text_height: "30dp"
    orientation: 'horizontal'
    BoxLayout:
        pos: self.parent.pos
        size: self.parent.size
        orientation: root.orientation
        padding: "10dp"
        Image:
            id: image
            allow_stretch: True
            keep_ratio: True
            size_hint_y: self.size_hint_y if root.orientation == 'horizontal' else None
            size_hint_x: self.size_hint_x if root.orientation == 'vertical' else None
            width: min(self.texture_size[0], root.width) if root.orientation == 'horizontal' else max(self.texture_size[0], root.width)
            height: min(self.texture_size[1], root.height) if root.orientation == 'vertical' else max(self.texture_size[1], root.height)
            source: root.source
            pos: [root.pos[0], root.pos[1]]
        Label:
            id: label_text
            text: app.translation(root.text_source)
            size_hint_y: self.size_hint_y if root.orientation == 'horizontal' else None
            #size_hint_x: self.size_hint_x if root.orientation == 'vertical' else None
            height: root.text_height

<I18NImageButton>:
    on_press: image.color = [1.0,1.0,1.0,0.5]
    on_release: image.color = [1.0,1.0,1.0,1.0]
    text_height: "30dp"
    atext: app.translation(root.text_source)
    orientation: 'horizontal'
    BoxLayout:
        pos: self.parent.pos
        size: self.parent.size
        orientation: root.orientation
        Image:
            id: image
            allow_stretch: True
            keep_ratio: True
            size_hint: [None, None]
            width: min(self.texture_size[0] * 1.5, root.width) if root.orientation == 'horizontal' else root.width
            height: min(self.texture_size[1] * 1.5, root.height) if root.orientation == 'vertical' else root.height
            source: root.source
        Label:
            id: label_text
            text: root.atext
            size_hint_y: self.size_hint_y if root.orientation == 'horizontal' else None
            height: root.text_height

<ErrorPopup>:
    BoxLayout:
        orientation: 'vertical'
        I18NLabel:
            text_source: root.text
            height: "30dp"
            size_hint_y: None
        ScrollView:
            Label:
                text: root.details
                text_size: self.width, None
                size_hint_y: None
        I18NButton:
            text_source: _("Close")
            on_release: root.dismiss()
            height: "30dp"
            size_hint_y: None

<HorizontalLabelSlider>:
    orientation: 'vertical'
    size_hint_y:None
    height: "60dp"
    padding: "3dp"
    canvas.before:
        Color:
            rgba: 1.0, 1.0, 1.0, 0.1
        Rectangle:
            pos:  self.pos
            size: self.size
    BoxLayout:
        orientation:'horizontal'
        I18NLabel:
            text_size: self.size
            halign: 'left'
            valign: 'middle'
            text_source: root.title
        Label:
            text_size: self.size
            halign: 'right'
            valign: 'middle'
            text: "{:.2f} {}".format(slider.value, root.unit)
    Slider:
        id: slider
        value: root.value
        min: root.min_value
        max: root.max_value
        step: root.step
        on_value: root.value = self.value

<VerticalLabelSlider>:
    orientation: 'vertical'
    padding: "3dp"
    canvas.before:
        Color:
            rgba: 1.0, 1.0, 1.0, 0.1
        Rectangle:
            pos:  self.pos
            size: self.size
    I18NLabel:
        size_hint_y:None
        height: "30dp"
        text_source: root.title
    Slider:
        id: slider
        orientation: 'vertical'
        value: root.value
        min: root.min_value
        max: root.max_value
        step: root.step
        on_value: root.value = self.value
    Label:
        size_hint_y:None
        height: "30dp"
        text: "{:.2f} {}".format(slider.value, root.unit)